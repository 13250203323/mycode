常用方法：
转码, 在文件开头加上
# -*- coding: utf-8 -*- 
"中文字".decode('utf-8').encode('gb2312')


1、字符串处理
list = str.split('/')
str = "/".join(list[0:-1]) 	#以'/'连接数组list第一至倒数第二项
str = file_path.replace('/', "\\")
str(123) # '123'


#正则匹配
import re
reg = r'img src="(.+\.png)"'
imgre = re.compile(reg)
imglist = re.findall(imgre,html)
re.sub(pattern, repl, string, count=0, flags=0) # http://www.crifan.com/python_re_sub_detailed_introduction/


2、调用shell命令
os.system("xcopy srcDir\\dir destDir\\dir /e /q /h /y") #拷贝文件
os.system("md "+file_path.replace('/', "\\")) #递归创建目录

3、目录操作
if os.path.exists(projectPath+"\\libs\\armeabi")==False:
if not os.path.isdir(file_path):
shutil.rmtree("/libs/armeabi")
currpath = os.getcwd() #当前目录
if os.path.isabs(filename):
os.mkdir(destdir) #创建
for parent, dirNames, fileNames in os.walk(dirPath):    #三个参数：分别返回1.父目录 2.所有文件夹名字（不含路径） 3.所有文件名字
baseParentName = os.path.basename(parent)#文件名dirname/subname/ -> subname

4、文件读写
    readfile = open(xmlpath,"r+")
    xmlcontent = readfile.read()
    readfile.close()

    xmlfile = open(xmlpath,"w+")
    xmlfile.write(xmlcontent)
    xmlfile.close()

from xml.etree import ElementTree 
import xml.etree.ElementTree as ET

ElementTree.fromstring(open(plist_filename, 'r').read())   #可读取plist、xml  标签格式的文件<key><key/>
plist_dict = tree_to_dict(root[0]) 
for k,v in plist_dict['frames'].items(): 

5、网络相关 urllib
import urllib
urllib.urlopen(url).read() #抓取网页的html

6、图片处理
to_list = lambda x: x.replace('{','').replace('}','').split(',')
rectlist = to_list('{{1237,2},{202,203}}')

#'A ifcondition else B' in Python is similar to 'condition? A:B'in c++, and 'condition and A or B' in lua
width = int( rectlist[3] if v['rotated'] else rectlist[2] )  # 或判断
height = int( rectlist[2] if v['rotated'] else rectlist[3] )  

sizelist = [ int(x) for x in to_list('{202,203}')]  
result_image = Image.new('RGBA', sizelist, (0,0,0,0))  





附录：
def tree_to_dict(tree):  
    d = {}  
    for index, item in enumerate(tree):  
        if item.tag == 'key':  
            if tree[index+1].tag == 'string':  
                d[item.text] = tree[index + 1].text  
            elif tree[index + 1].tag == 'true':  
                d[item.text] = True  
            elif tree[index + 1].tag == 'false':  
                d[item.text] = False  
            elif tree[index+1].tag == 'dict':  
                d[item.text] = tree_to_dict(tree[index+1])  
    return d 


============= 导入上一级目录的模块 import
import os,sys
sys.path.append("..") #不同目录结构相同模块名字会报错
# parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# sys.path.insert(0,parentdir)
import timer.timer


============= 异常捕捉
try:
	pass
except Exception as e:
	print e



============== function 参数
**name的参数 传入是一个dict
e.g.

def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    keys = sorted(keywords.keys())
    for kw in keys:
        print(kw, ":", keywords[kw])

cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")



======= function 
传参同时支持位置参数（positional arguments）和key-value方式（keyword arguments）， 位置参数需在kv参数前面
e.g. 
poo('value1', key='value2')

函数默认返回None， 

全局变量不能再函数中被赋值（除了global函数中），能被访问
global variables cannot be assigned within a function (unless named in a global statement), although they may be referenced.


默认参数是地址，可修改的
The default value is evaluated only once.

def f(a, L=[]):
    L.append(a)
    return L

print(f(1))
print(f(2))

This will print

[1]
[1, 2]




python
缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行

========== for 循环
words = ['cat', 'window', 'defenestrate']
>>> for w in words:
...     print(w, len(w))


>>> for w in words[:]:  # Loop over a slice copy of the entire list.
...     if len(w) > 6:
...         words.insert(0, w)
...
>>> words
['defenestrate', 'cat', 'window', 'defenestrate']

#倒叙数组
reversed(list)

#倒叙遍历
for i in range(0, num.__len__())[::-1]:
    print num[i]
#倒叙遍历
list = [1, 2, 3, 4, 5, 6]
print list[::-1]

list[a:b:c]  以c为增量，遍历list[a]到list[b+c]
a是开始索引
b是结束索引
c是索引增量


==== 非0的整型是True ,0是False
The while loop executes as long as the condition (here: b < 10) remains true. In Python, like in C, any non-zero integer value is true; zero is false.

======== 表 set dict list ===
dict 字典{}  if key in dict.keys():
list 数组[]  append insert
tuple 元组()

tab = {'a':100}
print tab['a']
>>> 100

print tab
>>> {'a': 100}
tab['b']=200
print tab
>>> {'a': 100, 'b': 200}
del(tab['a'])
print tab
>>> {'b': 200}

#判断列表中是否有key
if not baseParentName in readme.keys():

False,0,'',[],{},()都可以视为假

插入元素
x = [1,2,3]
x.append(4)
x.append([4,5,6])
x.insert(0,-1)



======== 表 和字符串相似 用'[ ]'
>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]

>>> squares[-3:]  # slicing returns a new list
[9, 16, 25]




============ 字符串 string
 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   
-6  -5  -4  -3  -2  -1

e.g.
>>> word = 'python'
>>> word[0:2] 
>>> py



============ s2 用python导出excel的 说明

使用Python生成配置文件的工具：
1.Python环境要求：
	Python（2.7）
	py2exe (0.6.9)
	Tenjin (1.1.1)
	XlsxWriter (0.5.5)
	xlwt (0.7.5)
	xlrd (0.9.3)

2.GUI库使用的是wxPython（3.0.0）

3.工程使用的是py2exe来打包的，打包脚本为：setup.py，重新打包后需要复制dist目录下的文件到ConfigTool目录下

4.因为打包环境是win64位系统，因此应该只能在64位系统上运行

5.这个工具需要放在和Excel配置文件相同的目录下，增加要生成的配置要在config/cfg.xml里加上配置项，然后增加对应的配置模板

6.运行工具下的main.exe开始使用！


=====================  s3/5 cocos.py脚本流程
编译c++->编译java->拷贝assets->生成apk
1、打包时协议优化 config_for_read  导出了配置总表
	def getSegLoaderXml(src_root):
2、分平台，根据平台名字 从/res/platform中提出对应的资源（logoBg.png等与平台相关资源）
	def delete_other_platform_resource( src_root, gameplatform):
3、资源分包，根据config/templet/exclude%d.xml文件
	def getSegLoaderXml(src_root):
4、统一修改工程名字、
	def get_android_package(src_root):
todo：c++部分 不需要每个proj.android_xx 工程重新编译一次